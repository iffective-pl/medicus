// <auto-generated />
using System;
using MedicusApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicusApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221002070514_MainPageCarousels")]
    partial class MainPageCarousels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorSpec", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.HasKey("DoctorId", "SpecId");

                    b.HasIndex("SpecId");

                    b.ToTable("DoctorSpec");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            SpecId = 1
                        },
                        new
                        {
                            DoctorId = 2,
                            SpecId = 1
                        },
                        new
                        {
                            DoctorId = 2,
                            SpecId = 6
                        },
                        new
                        {
                            DoctorId = 3,
                            SpecId = 4
                        },
                        new
                        {
                            DoctorId = 4,
                            SpecId = 4
                        },
                        new
                        {
                            DoctorId = 5,
                            SpecId = 7
                        },
                        new
                        {
                            DoctorId = 6,
                            SpecId = 8
                        },
                        new
                        {
                            DoctorId = 7,
                            SpecId = 2
                        },
                        new
                        {
                            DoctorId = 8,
                            SpecId = 9
                        },
                        new
                        {
                            DoctorId = 9,
                            SpecId = 3
                        },
                        new
                        {
                            DoctorId = 2,
                            SpecId = 10
                        },
                        new
                        {
                            DoctorId = 10,
                            SpecId = 10
                        },
                        new
                        {
                            DoctorId = 11,
                            SpecId = 11
                        },
                        new
                        {
                            DoctorId = 3,
                            SpecId = 11
                        },
                        new
                        {
                            DoctorId = 1,
                            SpecId = 12
                        },
                        new
                        {
                            DoctorId = 2,
                            SpecId = 12
                        },
                        new
                        {
                            DoctorId = 10,
                            SpecId = 12
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaticId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecId");

                    b.HasIndex("StaticId");

                    b.ToTable("Descriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "medicus-static/about-1.jpg",
                            Order = 1,
                            StaticId = 1
                        },
                        new
                        {
                            Id = 2,
                            Image = "medicus-static/about-2.jpg",
                            Order = 2,
                            StaticId = 1
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.DescriptionText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.ToTable("DescriptionTexts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescriptionId = 1,
                            Text = "",
                            Title = ""
                        },
                        new
                        {
                            Id = 2,
                            DescriptionId = 2,
                            Text = "",
                            Title = ""
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 1,
                            SpecializationId = 1,
                            Title = "Konsultacja",
                            Value = "150.00"
                        },
                        new
                        {
                            Id = 2,
                            Order = 2,
                            SpecializationId = 1,
                            Title = "Konsultacja + ECHO serca",
                            Value = "220.00"
                        },
                        new
                        {
                            Id = 3,
                            Order = 3,
                            SpecializationId = 1,
                            Title = "Konsultacja + ECHO serca + EKG",
                            Value = "250.00"
                        },
                        new
                        {
                            Id = 4,
                            Order = 4,
                            SpecializationId = 1,
                            Title = "ECHO Serca",
                            Value = "170.00"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.Advantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MainPageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainPageId");

                    b.ToTable("Advantages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Href = "docs",
                            Icon = "heart",
                            MainPageId = 1,
                            Name = "Wysokiej klasy specjaliści"
                        },
                        new
                        {
                            Id = 2,
                            Href = "",
                            Icon = "ventilator",
                            MainPageId = 1,
                            Name = "Nowoczesny sprzęt do ultrasonografii i echokardiografii"
                        },
                        new
                        {
                            Id = 3,
                            Href = "",
                            Icon = "wheelchair",
                            MainPageId = 1,
                            Name = "Łatwy dostęp"
                        },
                        new
                        {
                            Id = 4,
                            Href = "",
                            Icon = "city",
                            MainPageId = 1,
                            Name = "Komfortowe nowe wnętrza w idealnej lokalizacji"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ButtonHref")
                        .HasColumnType("text");

                    b.Property<string>("ButtonText")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MainPageId")
                        .HasColumnType("integer");

                    b.Property<string>("MainTitle")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainPageId");

                    b.ToTable("Carousels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ButtonHref = "docs",
                            ButtonText = "Nasi specjaliści",
                            MainPageId = 1,
                            MainTitle = "MEDICUS we Włocławku",
                            Source = "medicus-static/main-1.jpg",
                            SubTitle = "Przychodnia Specjalistyczna",
                            Text = "Leczymy naszych pacjentów od 1990 roku."
                        },
                        new
                        {
                            Id = 2,
                            MainPageId = 1,
                            Source = "medicus-static/main-2.jpg"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.MainPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MainPages");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Person.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("SpecTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            FirstName = "Wiesław",
                            LastName = "Nowakowski",
                            Order = 1,
                            SpecTitle = "Specjalista w zakresie chorób wewnętrznych i kardiologii",
                            Title = "Dr n. med."
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            FirstName = "Irena",
                            LastName = "Nowakowska",
                            Order = 2,
                            SpecTitle = "Specjalista w zakresie pediatrii i kardiologii",
                            Title = "Dr n. med."
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            FirstName = "Dorota",
                            LastName = "Nowakowska",
                            Order = 3,
                            SpecTitle = "Specjalista w zakresie położnictwa i ginekologii oraz perinatologii",
                            Title = "Prof. dr hab. med."
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            FirstName = "Zbigniew",
                            LastName = "Placek",
                            Order = 4,
                            SpecTitle = "",
                            Title = "Lek. med."
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            FirstName = "Ewa",
                            LastName = "Sewerynek",
                            Order = 5,
                            SpecTitle = "",
                            Title = "Prof. dr hab. med."
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            FirstName = "Tomasz",
                            LastName = "Kmieć",
                            Order = 6,
                            SpecTitle = "",
                            Title = "Dr n. med."
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Marek",
                            LastName = "Wrona",
                            Order = 7,
                            Title = "Dr n. med."
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            FirstName = "Janina",
                            LastName = "Wielicka",
                            Order = 8,
                            SpecTitle = "",
                            Title = "Lek. med."
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            FirstName = "Bogdan",
                            LastName = "Wojtecki",
                            Order = 9,
                            SpecTitle = "",
                            Title = "Lek. med."
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            FirstName = "Leszek",
                            LastName = "Dura",
                            Order = 10,
                            SpecTitle = "",
                            Title = "Lek. med."
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            FirstName = "Zbyszek",
                            LastName = "Ruszkowski",
                            Order = 11,
                            SpecTitle = "",
                            Title = "Lek. med."
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Person.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Friday")
                        .HasColumnType("text");

                    b.Property<string>("Monday")
                        .HasColumnType("text");

                    b.Property<string>("Saturday")
                        .HasColumnType("text");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Thursday")
                        .HasColumnType("text");

                    b.Property<string>("Tuesday")
                        .HasColumnType("text");

                    b.Property<string>("Wednesday")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            Friday = "15:30 - 17.00",
                            SpecializationId = 1,
                            Thursday = "15:30 - 17.00",
                            Tuesday = "15:30 - 17.00",
                            Wednesday = "15:30 - 17.00"
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            Monday = "15:00 - 17.00",
                            SpecializationId = 1,
                            Thursday = "15:00 - 17.00",
                            Tuesday = "15:00 - 17.00",
                            Wednesday = "15:00 - 17.00"
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            Monday = "15:00 - 17.00",
                            SpecializationId = 6,
                            Thursday = "15:00 - 17.00",
                            Tuesday = "15:00 - 17.00",
                            Wednesday = "15:00 - 17.00"
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 3,
                            Friday = "15:00 - 17.00",
                            Saturday = "15:00 - 17.00",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 4,
                            SpecializationId = 4,
                            Thursday = "14:00 - 17.00",
                            Tuesday = "14:00 - 17.00",
                            Wednesday = "14:00 - 17.00"
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 5,
                            Saturday = "od 9:00 (raz w miesiącu)",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 6,
                            Saturday = "od 9:00 (raz w miesiącu)",
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 7,
                            Saturday = "od 11:00 (raz w miesiącu)",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 8,
                            SpecializationId = 9,
                            Thursday = "15:30 - 17.00",
                            Tuesday = "15:30 - 17.00",
                            Wednesday = "15:30 - 17.00"
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 9,
                            Friday = "16:00 - 17:00",
                            SpecializationId = 3,
                            Thursday = "15:30 - 17.00",
                            Tuesday = "15:30 - 17.00",
                            Wednesday = "15:30 - 17.00"
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 2,
                            SpecializationId = 10,
                            Wednesday = "15:00 - 17.00"
                        },
                        new
                        {
                            Id = 13,
                            DoctorId = 10,
                            SpecializationId = 10,
                            Tuesday = "14:00 - 16.00"
                        },
                        new
                        {
                            Id = 14,
                            DoctorId = 11,
                            SpecializationId = 11,
                            Thursday = "15:00 - 16.30"
                        },
                        new
                        {
                            Id = 15,
                            DoctorId = 3,
                            Friday = "12:00 - 18.00",
                            Saturday = "12:00 - 18.00",
                            SpecializationId = 11
                        },
                        new
                        {
                            Id = 16,
                            DoctorId = 1,
                            Friday = "15:30 - 17.00",
                            SpecializationId = 12,
                            Thursday = "15:30 - 17.00",
                            Tuesday = "15:30 - 17.00",
                            Wednesday = "15:30 - 17.00"
                        },
                        new
                        {
                            Id = 17,
                            DoctorId = 2,
                            Monday = "15:00 - 17.00",
                            SpecializationId = 12,
                            Thursday = "15:00 - 17.00",
                            Tuesday = "15:00 - 17.00",
                            Wednesday = "15:00 - 17.00"
                        },
                        new
                        {
                            Id = 18,
                            DoctorId = 10,
                            SpecializationId = 12,
                            Tuesday = "14:00 - 16.00"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Spec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StyleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Specs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kardiologia",
                            StyleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Urologia",
                            StyleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ortopedia",
                            StyleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ginekologia",
                            StyleId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Internista",
                            StyleId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pediatria",
                            StyleId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Endokrynologia",
                            StyleId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Neurologia",
                            StyleId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dermatologia",
                            StyleId = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "ECHO Serca",
                            StyleId = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "USG",
                            StyleId = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = "Holter",
                            StyleId = 12
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.UI.Header", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDropdown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPredefined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Headers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Href = "/",
                            IsDropdown = false,
                            IsIndex = true,
                            IsPredefined = false,
                            Name = "Strona główna",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Href = "static/1",
                            IsDropdown = false,
                            IsIndex = false,
                            IsPredefined = false,
                            Name = "O nas",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            Href = "register",
                            IsDropdown = false,
                            IsIndex = false,
                            IsPredefined = true,
                            Name = "Rejestracja",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            Href = "docs",
                            IsDropdown = true,
                            IsIndex = false,
                            IsPredefined = false,
                            Name = "Nasi specjaliści",
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            Href = "docs",
                            IsDropdown = true,
                            IsIndex = false,
                            IsPredefined = false,
                            Name = "USG",
                            Order = 5
                        },
                        new
                        {
                            Id = 6,
                            Href = "docs",
                            IsDropdown = true,
                            IsIndex = false,
                            IsPredefined = false,
                            Name = "ECHO Serca",
                            Order = 6
                        },
                        new
                        {
                            Id = 7,
                            Href = "",
                            IsDropdown = false,
                            IsIndex = false,
                            IsPredefined = false,
                            Name = "Holter",
                            Order = 7
                        },
                        new
                        {
                            Id = 8,
                            Href = "contact",
                            IsDropdown = false,
                            IsIndex = false,
                            IsPredefined = true,
                            Name = "Kontakt",
                            Order = 8
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.UI.Static", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasMap = true,
                            Name = "O nas"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Data.UI.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "heart",
                            Color = ""
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "kidneys",
                            Color = ""
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "leg",
                            Color = ""
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "pregnant",
                            Color = ""
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "coughing",
                            Color = ""
                        },
                        new
                        {
                            Id = 6,
                            ClassName = "lactation",
                            Color = ""
                        },
                        new
                        {
                            Id = 7,
                            ClassName = "stethoscope",
                            Color = ""
                        },
                        new
                        {
                            Id = 8,
                            ClassName = "neurology",
                            Color = ""
                        },
                        new
                        {
                            Id = 9,
                            ClassName = "allergies",
                            Color = ""
                        },
                        new
                        {
                            Id = 10,
                            ClassName = "echo",
                            Color = ""
                        },
                        new
                        {
                            Id = 11,
                            ClassName = "xray",
                            Color = ""
                        },
                        new
                        {
                            Id = 12,
                            ClassName = "blood_pressure",
                            Color = ""
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Links.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("Href")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.HasIndex("SpecId")
                        .IsUnique();

                    b.ToTable("Links");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Href = "cardiology",
                            Order = 1,
                            SpecId = 1
                        },
                        new
                        {
                            Id = 2,
                            Href = "urology",
                            Order = 2,
                            SpecId = 2
                        },
                        new
                        {
                            Id = 3,
                            Href = "orthopedy",
                            Order = 3,
                            SpecId = 3
                        },
                        new
                        {
                            Id = 4,
                            Href = "ginecology",
                            Order = 4,
                            SpecId = 4
                        },
                        new
                        {
                            Id = 5,
                            Href = "internist",
                            Order = 5,
                            SpecId = 5
                        },
                        new
                        {
                            Id = 6,
                            Href = "pediatrics",
                            Order = 6,
                            SpecId = 6
                        },
                        new
                        {
                            Id = 7,
                            Href = "endokrynology",
                            Order = 7,
                            SpecId = 7
                        },
                        new
                        {
                            Id = 8,
                            Href = "echokids",
                            Order = 8,
                            SpecId = 8
                        },
                        new
                        {
                            Id = 9,
                            Href = "echoadults",
                            Order = 9,
                            SpecId = 9
                        },
                        new
                        {
                            Id = 10,
                            Href = "echopregnancy",
                            Order = 10,
                            SpecId = 10
                        },
                        new
                        {
                            Id = 11,
                            Href = "usgkids",
                            Order = 11,
                            SpecId = 11
                        },
                        new
                        {
                            Id = 12,
                            Href = "usgadults",
                            Order = 12,
                            SpecId = 12
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Plac Wolności 15",
                            City = "Włocławek",
                            Code = "87-800",
                            Name = "Przychodnia Specjalistyczna MEDICUS"
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "biuro@medicus.włocławek.pl",
                            CompanyId = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "rejestracja@medicus.włocławek.pl",
                            CompanyId = 1,
                            Order = 2
                        });
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            IsMobile = false,
                            Number = "54 2313141",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            IsMobile = false,
                            Number = "54 2313741",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            IsMobile = true,
                            Number = "692 184 214",
                            Order = 3
                        });
                });

            modelBuilder.Entity("DoctorSpec", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Person.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicusApp.Models.Data.Spec", null)
                        .WithMany()
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.Description", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Spec", "Spec")
                        .WithMany("Descriptions")
                        .HasForeignKey("SpecId");

                    b.HasOne("MedicusApp.Models.Data.UI.Static", "Static")
                        .WithMany("Descriptions")
                        .HasForeignKey("StaticId");

                    b.Navigation("Spec");

                    b.Navigation("Static");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.DescriptionText", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Desc.Description", null)
                        .WithMany("DescriptionTexts")
                        .HasForeignKey("DescriptionId");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.Price", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Spec", "Specialization")
                        .WithMany("Prices")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.Advantage", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Main.MainPage", null)
                        .WithMany("Advantages")
                        .HasForeignKey("MainPageId");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.Carousel", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Main.MainPage", null)
                        .WithMany("Carousels")
                        .HasForeignKey("MainPageId");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Person.WorkingHours", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.Person.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicusApp.Models.Data.Spec", "Specialization")
                        .WithMany("WorkingHours")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Spec", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.UI.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MedicusApp.Models.Links.Link", b =>
                {
                    b.HasOne("MedicusApp.Models.Data.UI.Header", "Header")
                        .WithMany("Links")
                        .HasForeignKey("HeaderId");

                    b.HasOne("MedicusApp.Models.Data.Spec", "Spec")
                        .WithOne("Link")
                        .HasForeignKey("MedicusApp.Models.Links.Link", "SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Header");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Email", b =>
                {
                    b.HasOne("MedicusApp.Models.Subject.Company", null)
                        .WithMany("Emails")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Phone", b =>
                {
                    b.HasOne("MedicusApp.Models.Subject.Company", null)
                        .WithMany("Phones")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Desc.Description", b =>
                {
                    b.Navigation("DescriptionTexts");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Main.MainPage", b =>
                {
                    b.Navigation("Advantages");

                    b.Navigation("Carousels");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Person.Doctor", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.Spec", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Link")
                        .IsRequired();

                    b.Navigation("Prices");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.UI.Header", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("MedicusApp.Models.Data.UI.Static", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("MedicusApp.Models.Subject.Company", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
